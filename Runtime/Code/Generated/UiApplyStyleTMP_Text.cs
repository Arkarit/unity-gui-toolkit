// Auto-generated, please do not change!
using UnityEngine;
using GuiToolkit.Style;

namespace GuiToolkit.Style
{	[ExecuteAlways]
	public class UiApplyStyleTMP_Text : UiAbstractApplyStyle<TMPro.TMP_Text, UiStyleTMP_Text>
	{
		public override void Apply()
		{
			if (!SpecificMonoBehaviour || SpecificStyle == null)
				return;

			if (SpecificStyle.IsRightToLeftText.IsApplicable);
				SpecificMonoBehaviour.isRightToLeftText = SpecificStyle.IsRightToLeftText.Value;
			if (SpecificStyle.Font.IsApplicable);
				SpecificMonoBehaviour.font = SpecificStyle.Font.Value;
			if (SpecificStyle.FontSharedMaterial.IsApplicable);
				SpecificMonoBehaviour.fontSharedMaterial = SpecificStyle.FontSharedMaterial.Value;
			if (SpecificStyle.FontSharedMaterials.IsApplicable);
				SpecificMonoBehaviour.fontSharedMaterials = SpecificStyle.FontSharedMaterials.Value;
			if (SpecificStyle.FontMaterial.IsApplicable);
				SpecificMonoBehaviour.fontMaterial = SpecificStyle.FontMaterial.Value;
			if (SpecificStyle.FontMaterials.IsApplicable);
				SpecificMonoBehaviour.fontMaterials = SpecificStyle.FontMaterials.Value;
			if (SpecificStyle.Color.IsApplicable);
				SpecificMonoBehaviour.color = SpecificStyle.Color.Value;
			if (SpecificStyle.Alpha.IsApplicable);
				SpecificMonoBehaviour.alpha = SpecificStyle.Alpha.Value;
			if (SpecificStyle.EnableVertexGradient.IsApplicable);
				SpecificMonoBehaviour.enableVertexGradient = SpecificStyle.EnableVertexGradient.Value;
			if (SpecificStyle.ColorGradient.IsApplicable);
				SpecificMonoBehaviour.colorGradient = SpecificStyle.ColorGradient.Value;
			if (SpecificStyle.ColorGradientPreset.IsApplicable);
				SpecificMonoBehaviour.colorGradientPreset = SpecificStyle.ColorGradientPreset.Value;
			if (SpecificStyle.SpriteAsset.IsApplicable);
				SpecificMonoBehaviour.spriteAsset = SpecificStyle.SpriteAsset.Value;
			if (SpecificStyle.TintAllSprites.IsApplicable);
				SpecificMonoBehaviour.tintAllSprites = SpecificStyle.TintAllSprites.Value;
			if (SpecificStyle.StyleSheet.IsApplicable);
				SpecificMonoBehaviour.styleSheet = SpecificStyle.StyleSheet.Value;
			if (SpecificStyle.TextStyle.IsApplicable);
				SpecificMonoBehaviour.textStyle = SpecificStyle.TextStyle.Value;
			if (SpecificStyle.OverrideColorTags.IsApplicable);
				SpecificMonoBehaviour.overrideColorTags = SpecificStyle.OverrideColorTags.Value;
			if (SpecificStyle.FaceColor.IsApplicable);
				SpecificMonoBehaviour.faceColor = SpecificStyle.FaceColor.Value;
			if (SpecificStyle.OutlineColor.IsApplicable);
				SpecificMonoBehaviour.outlineColor = SpecificStyle.OutlineColor.Value;
			if (SpecificStyle.OutlineWidth.IsApplicable);
				SpecificMonoBehaviour.outlineWidth = SpecificStyle.OutlineWidth.Value;
			if (SpecificStyle.FontSize.IsApplicable);
				SpecificMonoBehaviour.fontSize = SpecificStyle.FontSize.Value;
			if (SpecificStyle.FontWeight.IsApplicable);
				SpecificMonoBehaviour.fontWeight = SpecificStyle.FontWeight.Value;
			if (SpecificStyle.EnableAutoSizing.IsApplicable);
				SpecificMonoBehaviour.enableAutoSizing = SpecificStyle.EnableAutoSizing.Value;
			if (SpecificStyle.FontSizeMin.IsApplicable);
				SpecificMonoBehaviour.fontSizeMin = SpecificStyle.FontSizeMin.Value;
			if (SpecificStyle.FontSizeMax.IsApplicable);
				SpecificMonoBehaviour.fontSizeMax = SpecificStyle.FontSizeMax.Value;
			if (SpecificStyle.FontStyle.IsApplicable);
				SpecificMonoBehaviour.fontStyle = SpecificStyle.FontStyle.Value;
			if (SpecificStyle.HorizontalAlignment.IsApplicable);
				SpecificMonoBehaviour.horizontalAlignment = SpecificStyle.HorizontalAlignment.Value;
			if (SpecificStyle.VerticalAlignment.IsApplicable);
				SpecificMonoBehaviour.verticalAlignment = SpecificStyle.VerticalAlignment.Value;
			if (SpecificStyle.Alignment.IsApplicable);
				SpecificMonoBehaviour.alignment = SpecificStyle.Alignment.Value;
			if (SpecificStyle.CharacterSpacing.IsApplicable);
				SpecificMonoBehaviour.characterSpacing = SpecificStyle.CharacterSpacing.Value;
			if (SpecificStyle.WordSpacing.IsApplicable);
				SpecificMonoBehaviour.wordSpacing = SpecificStyle.WordSpacing.Value;
			if (SpecificStyle.LineSpacing.IsApplicable);
				SpecificMonoBehaviour.lineSpacing = SpecificStyle.LineSpacing.Value;
			if (SpecificStyle.LineSpacingAdjustment.IsApplicable);
				SpecificMonoBehaviour.lineSpacingAdjustment = SpecificStyle.LineSpacingAdjustment.Value;
			if (SpecificStyle.ParagraphSpacing.IsApplicable);
				SpecificMonoBehaviour.paragraphSpacing = SpecificStyle.ParagraphSpacing.Value;
			if (SpecificStyle.CharacterWidthAdjustment.IsApplicable);
				SpecificMonoBehaviour.characterWidthAdjustment = SpecificStyle.CharacterWidthAdjustment.Value;
			if (SpecificStyle.EnableWordWrapping.IsApplicable);
				SpecificMonoBehaviour.enableWordWrapping = SpecificStyle.EnableWordWrapping.Value;
			if (SpecificStyle.WordWrappingRatios.IsApplicable);
				SpecificMonoBehaviour.wordWrappingRatios = SpecificStyle.WordWrappingRatios.Value;
			if (SpecificStyle.OverflowMode.IsApplicable);
				SpecificMonoBehaviour.overflowMode = SpecificStyle.OverflowMode.Value;
			if (SpecificStyle.LinkedTextComponent.IsApplicable);
				SpecificMonoBehaviour.linkedTextComponent = SpecificStyle.LinkedTextComponent.Value;
			if (SpecificStyle.EnableKerning.IsApplicable);
				SpecificMonoBehaviour.enableKerning = SpecificStyle.EnableKerning.Value;
			if (SpecificStyle.ExtraPadding.IsApplicable);
				SpecificMonoBehaviour.extraPadding = SpecificStyle.ExtraPadding.Value;
			if (SpecificStyle.RichText.IsApplicable);
				SpecificMonoBehaviour.richText = SpecificStyle.RichText.Value;
			if (SpecificStyle.ParseCtrlCharacters.IsApplicable);
				SpecificMonoBehaviour.parseCtrlCharacters = SpecificStyle.ParseCtrlCharacters.Value;
			if (SpecificStyle.IsOverlay.IsApplicable);
				SpecificMonoBehaviour.isOverlay = SpecificStyle.IsOverlay.Value;
			if (SpecificStyle.IsOrthographic.IsApplicable);
				SpecificMonoBehaviour.isOrthographic = SpecificStyle.IsOrthographic.Value;
			if (SpecificStyle.EnableCulling.IsApplicable);
				SpecificMonoBehaviour.enableCulling = SpecificStyle.EnableCulling.Value;
			if (SpecificStyle.IgnoreVisibility.IsApplicable);
				SpecificMonoBehaviour.ignoreVisibility = SpecificStyle.IgnoreVisibility.Value;
			if (SpecificStyle.HorizontalMapping.IsApplicable);
				SpecificMonoBehaviour.horizontalMapping = SpecificStyle.HorizontalMapping.Value;
			if (SpecificStyle.VerticalMapping.IsApplicable);
				SpecificMonoBehaviour.verticalMapping = SpecificStyle.VerticalMapping.Value;
			if (SpecificStyle.MappingUvLineOffset.IsApplicable);
				SpecificMonoBehaviour.mappingUvLineOffset = SpecificStyle.MappingUvLineOffset.Value;
			if (SpecificStyle.RenderMode.IsApplicable);
				SpecificMonoBehaviour.renderMode = SpecificStyle.RenderMode.Value;
			if (SpecificStyle.GeometrySortingOrder.IsApplicable);
				SpecificMonoBehaviour.geometrySortingOrder = SpecificStyle.GeometrySortingOrder.Value;
			if (SpecificStyle.IsTextObjectScaleStatic.IsApplicable);
				SpecificMonoBehaviour.isTextObjectScaleStatic = SpecificStyle.IsTextObjectScaleStatic.Value;
			if (SpecificStyle.VertexBufferAutoSizeReduction.IsApplicable);
				SpecificMonoBehaviour.vertexBufferAutoSizeReduction = SpecificStyle.VertexBufferAutoSizeReduction.Value;
			if (SpecificStyle.FirstVisibleCharacter.IsApplicable);
				SpecificMonoBehaviour.firstVisibleCharacter = SpecificStyle.FirstVisibleCharacter.Value;
			if (SpecificStyle.MaxVisibleCharacters.IsApplicable);
				SpecificMonoBehaviour.maxVisibleCharacters = SpecificStyle.MaxVisibleCharacters.Value;
			if (SpecificStyle.MaxVisibleWords.IsApplicable);
				SpecificMonoBehaviour.maxVisibleWords = SpecificStyle.MaxVisibleWords.Value;
			if (SpecificStyle.MaxVisibleLines.IsApplicable);
				SpecificMonoBehaviour.maxVisibleLines = SpecificStyle.MaxVisibleLines.Value;
			if (SpecificStyle.UseMaxVisibleDescender.IsApplicable);
				SpecificMonoBehaviour.useMaxVisibleDescender = SpecificStyle.UseMaxVisibleDescender.Value;
			if (SpecificStyle.PageToDisplay.IsApplicable);
				SpecificMonoBehaviour.pageToDisplay = SpecificStyle.PageToDisplay.Value;
			if (SpecificStyle.Margin.IsApplicable);
				SpecificMonoBehaviour.margin = SpecificStyle.Margin.Value;
			if (SpecificStyle.HavePropertiesChanged.IsApplicable);
				SpecificMonoBehaviour.havePropertiesChanged = SpecificStyle.HavePropertiesChanged.Value;
			if (SpecificStyle.IsUsingLegacyAnimationComponent.IsApplicable);
				SpecificMonoBehaviour.isUsingLegacyAnimationComponent = SpecificStyle.IsUsingLegacyAnimationComponent.Value;
			if (SpecificStyle.AutoSizeTextContainer.IsApplicable);
				SpecificMonoBehaviour.autoSizeTextContainer = SpecificStyle.AutoSizeTextContainer.Value;
			if (SpecificStyle.IsVolumetricText.IsApplicable);
				SpecificMonoBehaviour.isVolumetricText = SpecificStyle.IsVolumetricText.Value;
			if (SpecificStyle.Maskable.IsApplicable);
				SpecificMonoBehaviour.maskable = SpecificStyle.Maskable.Value;
			if (SpecificStyle.IsMaskingGraphic.IsApplicable);
				SpecificMonoBehaviour.isMaskingGraphic = SpecificStyle.IsMaskingGraphic.Value;
			if (SpecificStyle.RaycastTarget.IsApplicable);
				SpecificMonoBehaviour.raycastTarget = SpecificStyle.RaycastTarget.Value;
			if (SpecificStyle.RaycastPadding.IsApplicable);
				SpecificMonoBehaviour.raycastPadding = SpecificStyle.RaycastPadding.Value;
			if (SpecificStyle.Material.IsApplicable);
				SpecificMonoBehaviour.material = SpecificStyle.Material.Value;
		}

		public override UiAbstractStyleBase CreateStyle(string _name)
		{
			UiStyleTMP_Text result = new UiStyleTMP_Text();

			if (!SpecificMonoBehaviour)
				return result;

			result.Name = _name;
			result.IsRightToLeftText.Value = SpecificMonoBehaviour.isRightToLeftText;
			result.Font.Value = SpecificMonoBehaviour.font;
			result.FontSharedMaterial.Value = SpecificMonoBehaviour.fontSharedMaterial;
			result.FontSharedMaterials.Value = SpecificMonoBehaviour.fontSharedMaterials;
			result.FontMaterial.Value = SpecificMonoBehaviour.fontMaterial;
			result.FontMaterials.Value = SpecificMonoBehaviour.fontMaterials;
			result.Color.Value = SpecificMonoBehaviour.color;
			result.Alpha.Value = SpecificMonoBehaviour.alpha;
			result.EnableVertexGradient.Value = SpecificMonoBehaviour.enableVertexGradient;
			result.ColorGradient.Value = SpecificMonoBehaviour.colorGradient;
			result.ColorGradientPreset.Value = SpecificMonoBehaviour.colorGradientPreset;
			result.SpriteAsset.Value = SpecificMonoBehaviour.spriteAsset;
			result.TintAllSprites.Value = SpecificMonoBehaviour.tintAllSprites;
			result.StyleSheet.Value = SpecificMonoBehaviour.styleSheet;
			result.TextStyle.Value = SpecificMonoBehaviour.textStyle;
			result.OverrideColorTags.Value = SpecificMonoBehaviour.overrideColorTags;
			result.FaceColor.Value = SpecificMonoBehaviour.faceColor;
			result.OutlineColor.Value = SpecificMonoBehaviour.outlineColor;
			result.OutlineWidth.Value = SpecificMonoBehaviour.outlineWidth;
			result.FontSize.Value = SpecificMonoBehaviour.fontSize;
			result.FontWeight.Value = SpecificMonoBehaviour.fontWeight;
			result.EnableAutoSizing.Value = SpecificMonoBehaviour.enableAutoSizing;
			result.FontSizeMin.Value = SpecificMonoBehaviour.fontSizeMin;
			result.FontSizeMax.Value = SpecificMonoBehaviour.fontSizeMax;
			result.FontStyle.Value = SpecificMonoBehaviour.fontStyle;
			result.HorizontalAlignment.Value = SpecificMonoBehaviour.horizontalAlignment;
			result.VerticalAlignment.Value = SpecificMonoBehaviour.verticalAlignment;
			result.Alignment.Value = SpecificMonoBehaviour.alignment;
			result.CharacterSpacing.Value = SpecificMonoBehaviour.characterSpacing;
			result.WordSpacing.Value = SpecificMonoBehaviour.wordSpacing;
			result.LineSpacing.Value = SpecificMonoBehaviour.lineSpacing;
			result.LineSpacingAdjustment.Value = SpecificMonoBehaviour.lineSpacingAdjustment;
			result.ParagraphSpacing.Value = SpecificMonoBehaviour.paragraphSpacing;
			result.CharacterWidthAdjustment.Value = SpecificMonoBehaviour.characterWidthAdjustment;
			result.EnableWordWrapping.Value = SpecificMonoBehaviour.enableWordWrapping;
			result.WordWrappingRatios.Value = SpecificMonoBehaviour.wordWrappingRatios;
			result.OverflowMode.Value = SpecificMonoBehaviour.overflowMode;
			result.LinkedTextComponent.Value = SpecificMonoBehaviour.linkedTextComponent;
			result.EnableKerning.Value = SpecificMonoBehaviour.enableKerning;
			result.ExtraPadding.Value = SpecificMonoBehaviour.extraPadding;
			result.RichText.Value = SpecificMonoBehaviour.richText;
			result.ParseCtrlCharacters.Value = SpecificMonoBehaviour.parseCtrlCharacters;
			result.IsOverlay.Value = SpecificMonoBehaviour.isOverlay;
			result.IsOrthographic.Value = SpecificMonoBehaviour.isOrthographic;
			result.EnableCulling.Value = SpecificMonoBehaviour.enableCulling;
			result.IgnoreVisibility.Value = SpecificMonoBehaviour.ignoreVisibility;
			result.HorizontalMapping.Value = SpecificMonoBehaviour.horizontalMapping;
			result.VerticalMapping.Value = SpecificMonoBehaviour.verticalMapping;
			result.MappingUvLineOffset.Value = SpecificMonoBehaviour.mappingUvLineOffset;
			result.RenderMode.Value = SpecificMonoBehaviour.renderMode;
			result.GeometrySortingOrder.Value = SpecificMonoBehaviour.geometrySortingOrder;
			result.IsTextObjectScaleStatic.Value = SpecificMonoBehaviour.isTextObjectScaleStatic;
			result.VertexBufferAutoSizeReduction.Value = SpecificMonoBehaviour.vertexBufferAutoSizeReduction;
			result.FirstVisibleCharacter.Value = SpecificMonoBehaviour.firstVisibleCharacter;
			result.MaxVisibleCharacters.Value = SpecificMonoBehaviour.maxVisibleCharacters;
			result.MaxVisibleWords.Value = SpecificMonoBehaviour.maxVisibleWords;
			result.MaxVisibleLines.Value = SpecificMonoBehaviour.maxVisibleLines;
			result.UseMaxVisibleDescender.Value = SpecificMonoBehaviour.useMaxVisibleDescender;
			result.PageToDisplay.Value = SpecificMonoBehaviour.pageToDisplay;
			result.Margin.Value = SpecificMonoBehaviour.margin;
			result.HavePropertiesChanged.Value = SpecificMonoBehaviour.havePropertiesChanged;
			result.IsUsingLegacyAnimationComponent.Value = SpecificMonoBehaviour.isUsingLegacyAnimationComponent;
			result.AutoSizeTextContainer.Value = SpecificMonoBehaviour.autoSizeTextContainer;
			result.IsVolumetricText.Value = SpecificMonoBehaviour.isVolumetricText;
			result.Maskable.Value = SpecificMonoBehaviour.maskable;
			result.IsMaskingGraphic.Value = SpecificMonoBehaviour.isMaskingGraphic;
			result.RaycastTarget.Value = SpecificMonoBehaviour.raycastTarget;
			result.RaycastPadding.Value = SpecificMonoBehaviour.raycastPadding;
			result.Material.Value = SpecificMonoBehaviour.material;

			return result;
		}
	}
}
